swagger: "2.0"
info:
  title: "Mechanic API"
  description: "API for managing customers, service tickets, mechanics, and inventory."
  version: "1.0.0"
host: "mechanic-api-clul.onrender.com"
basePath: "/"
schemes:
  - "https"
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
paths:
  # Customer Routes
  /customers/login:
    post:
      tags:
        - "Customer"
      summary: "Customer Login"
      description: "Allows a customer to log in and receive a token."
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/LoginPayload"
      responses:
        200:
          description: "Successful login"
          schema:
            $ref: "#/definitions/LoginResponse"
        401:
          description: "Invalid credentials"
  /customers/my-tickets:
    get:
      tags:
        - "Customer"
      summary: "Get Customer's Service Tickets"
      description: "Returns all service tickets associated with the authenticated customer."
      security:
        - bearerAuth: []
      responses:
        200:
          description: "List of service tickets"
          schema:
            $ref: "#/definitions/ServiceTicketsResponse"
  /customers:
    get:
      tags:
        - "Customers"
      summary: "Get all customers"
      description: "Fetches a paginated list of all customers."
      parameters:
        - in: "query"
          name: "page"
          required: false
          type: "integer"
          description: "Page number"
        - in: "query"
          name: "per_page"
          required: false
          type: "integer"
          description: "Number of customers per page"
      responses:
        200:
          description: "List of customers"
          schema:
            $ref: "#/definitions/CustomerListResponse"
        500:
          description: "Internal server error"
  /customers/register:
    post:
      tags:
        - "Customers"
      summary: "Register a new customer"
      description: "Creates a new customer in the database."
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/RegisterCustomerPayload"
      responses:
        201:
          description: "Customer registered successfully"
          schema:
            $ref: "#/definitions/CustomerResponse"
        400:
          description: "Validation errors"
        500:
          description: "Internal server error"
  /customers/create-ticket:
    post:
      tags:
        - "Customer"
      summary: "Create a Service Ticket"
      description: "Allows an authenticated customer to create a new service ticket."
      security:
        - bearerAuth: []
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/CreateTicketPayload"
      responses:
        201:
          description: "Service ticket created successfully"
        400:
          description: "Validation errors or missing required fields"

  # Mechanic Routes
  /mechanics/login:
    post:
      tags:
        - "Mechanic"
      summary: "Mechanic Login"
      description: "Allows a mechanic to log in and receive a token."
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/LoginPayload"
      responses:
        200:
          description: "Successful login"
          schema:
            $ref: "#/definitions/LoginResponse"
        401:
          description: "Invalid credentials"
  /mechanics/statistics:
    get:
      tags:
        - "Mechanic"
      summary: "Mechanic Statistics"
      description: "Returns statistics for mechanics based on the number of service tickets they've worked on."
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Mechanic statistics"
          schema:
            $ref: "#/definitions/MechanicStatisticsResponse"
  /mechanics/:
    get:
      tags:
        - "Mechanic"
      summary: "Get All Mechanics"
      description: "Returns a list of all mechanics."
      responses:
        200:
          description: "List of mechanics"
          schema:
            $ref: "#/definitions/MechanicsResponse"
  /mechanics/<int:id>:
    put:
      tags:
        - "Mechanic"
      summary: "Update Mechanic"
      description: "Updates the details of a mechanic."
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/UpdateMechanicPayload"
      responses:
        200:
          description: "Mechanic updated successfully"
          schema:
            $ref: "#/definitions/MechanicResponse"
        400:
          description: "Validation errors"
    delete:
      tags:
        - "Mechanic"
      summary: "Delete Mechanic"
      description: "Deletes a mechanic by ID."
      responses:
        200:
          description: "Mechanic deleted successfully"
        404:
          description: "Mechanic not found"
  /mechanics/register:
    post:
      tags:
        - "Mechanic"
      summary: "Register a New Mechanic"
      description: "Registers a new mechanic with the provided details."
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/RegisterMechanicPayload"
      responses:
        201:
          description: "Mechanic registered successfully"
        400:
          description: "Validation errors or email already exists"

  # Service Ticket Routes
  /service-tickets/:
    post:
      tags:
        - "Service Ticket"
      summary: "Create Service Ticket"
      description: "Allows an authenticated customer to create a new service ticket."
      security:
        - bearerAuth: []
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/CreateServiceTicketPayload"
      responses:
        201:
          description: "Service ticket created successfully"
        400:
          description: "Validation errors or missing required fields"
  /service-tickets/<int:ticket_id>:
    get:
      tags:
        - "Service Ticket"
      summary: "Get Service Ticket"
      description: "Fetches details of a specific service ticket for the authenticated customer."
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Service ticket details"
          schema:
            $ref: "#/definitions/ServiceTicketResponse"
        404:
          description: "Service ticket not found"
    put:
      tags:
        - "Service Ticket"
      summary: "Update Service Ticket"
      description: "Updates the details of a specific service ticket for the authenticated customer."
      security:
        - bearerAuth: []
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/UpdateServiceTicketPayload"
      responses:
        200:
          description: "Service ticket updated successfully"
        404:
          description: "Service ticket not found"
    delete:
      tags:
        - "Service Ticket"
      summary: "Delete Service Ticket"
      description: "Deletes a specific service ticket for the authenticated customer."
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Service ticket deleted successfully"
        404:
          description: "Service ticket not found"
  /service-tickets/<int:ticket_id>/add-mechanics:
    put:
      tags:
        - "Service Ticket"
      summary: "Add or Remove Mechanics from Service Ticket"
      description: "Adds or removes mechanics from a specific service ticket."
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/AddMechanicsPayload"
      responses:
        200:
          description: "Mechanics updated successfully"
        404:
          description: "Service ticket not found"

  # Inventory Routes
  /inventory/:
    post:
      tags:
        - "Inventory"
      summary: "Create Inventory Item"
      description: "Creates a new inventory item."
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/CreateInventoryPayload"
      responses:
        201:
          description: "Inventory item created successfully"
          schema:
            $ref: "#/definitions/InventoryResponse"
        400:
          description: "Validation errors"
    get:
      tags:
        - "Inventory"
      summary: "Get All Inventory Items"
      description: "Returns a list of all inventory items."
      responses:
        200:
          description: "List of inventory items"
          schema:
            $ref: "#/definitions/InventoriesResponse"
  /inventory/<int:id>:
    put:
      tags:
        - "Inventory"
      summary: "Update Inventory Item"
      description: "Updates the details of an inventory item."
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/UpdateInventoryPayload"
      responses:
        200:
          description: "Inventory item updated successfully"
          examples:
            application/json:
              id: 1
              name: "Updated Brake Pads"
              price: 59.99
        404:
          description: "Inventory item not found"
          examples:
            application/json:
              message: "Inventory item not found"
    delete:
      tags:
        - "Inventory"
      summary: "Delete Inventory Item"
      description: "Deletes an inventory item by ID."
      responses:
        200:
          description: "Inventory item deleted successfully"
          examples:
            application/json:
              message: "Inventory deleted"
        404:
          description: "Inventory item not found"
          examples:
            application/json:
              message: "Inventory item not found"
  /inventory/<int:inventory_id>/add-part:
    post:
      tags:
        - "Inventory"
      summary: "Add Part to Service Ticket"
      description: "Adds a part from inventory to a service ticket."
      security:
        - bearerAuth: []
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/AddPartPayload"
      responses:
        200:
          description: "Part added to service ticket successfully"
        400:
          description: "Validation errors or part already associated"

definitions:
  # Shared Definitions
  LoginPayload:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
  LoginResponse:
    type: "object"
    properties:
      token:
        type: "string"
  ServiceTicketsResponse:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        VIN:
          type: "string"
        description:
          type: "string"
        service_date:
          type: "string"
          format: "date-time"
        customer_id:
          type: "integer"
  CustomersResponse:
    type: "object"
    properties:
      customers:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "integer"
            name:
              type: "string"
            email:
              type: "string"
            phone:
              type: "string"
      total:
        type: "integer"
      pages:
        type: "integer"
  RegisterPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
  RegisterCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
    required:
      - "name"
      - "email"
      - "password"
      - "phone"
  CustomerResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
  CustomerListResponse:
    type: "object"
    properties:
      customers:
        type: "array"
        items:
          $ref: "#/definitions/CustomerResponse"
      total:
        type: "integer"
      pages:
        type: "integer"
  CreateTicketPayload:
    type: "object"
    properties:
      VIN:
        type: "string"
      description:
        type: "string"
  CreateServiceTicketPayload:
    type: "object"
    properties:
      VIN:
        type: "string"
      description:
        type: "string"
  UpdateServiceTicketPayload:
    type: "object"
    properties:
      VIN:
        type: "string"
      description:
        type: "string"
  ServiceTicketResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      VIN:
        type: "string"
      description:
        type: "string"
      service_date:
        type: "string"
        format: "date-time"
      customer_id:
        type: "integer"
  AddMechanicsPayload:
    type: "object"
    properties:
      add_ids:
        type: "array"
        items:
          type: "integer"
      remove_ids:
        type: "array"
        items:
          type: "integer"
  CreateInventoryPayload:
    type: "object"
    properties:
      name:
        type: "string"
      price:
        type: "number"
  UpdateInventoryPayload:
    type: "object"
    properties:
      name:
        type: "string"
      price:
        type: "number"
  InventoryResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      price:
        type: "number"
  InventoriesResponse:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        price:
          type: "number"
  AddPartPayload:
    type: "object"
    properties:
      ticket_id:
        type: "integer"